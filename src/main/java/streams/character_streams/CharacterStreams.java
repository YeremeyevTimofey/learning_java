package streams.character_streams;

/**
 *  В платформе java значения символов хранятся с использованием соглашений Unicode. Потоки символов автоматически
 *  преобразуют этот формат в привычный нам набор символов char или обратно. Все классы потоков символов проиходят от
 *  абстрактных классов Reader и Writer.
 *  Список классов в иерархии:
       Reader:
 *  • BufferedReader - это средство чтения повышает производительность за счет буферизации ввода при чтении
 *  символов, массивов и строк.
 *  • CharArrayReader - этот класс использует массив символов в качестве источника входных данных.
 *  • LineNumberReader - этот класс расширяет BufferedReader и представляет собой буферизованный поток ввода символов,
 *  который отслеживает номера строк.
 *  • InputStreamReader - это мост от потоков байтов к потокам символов: он считывает байты и декодирует их в символы,
 *  используя указанную кодировку. Для повышения эффективности InputStreamReader должен быть заключен в BufferedReader.
 *  • FileReader - это специализированный поток символов для чтения файлов символов.
 *  • PushbackReader - средство чтения потока символов, которое позволяет возвращать символы в поток. Это позволяет
 *  просматривать входной поток вперед.
 *  • PipedReader - конвейерные потоки ввода символов, которые следует подключить к PipedWriter для создания
 *  конвейерного потока. В идеале для PipedReader и PipedWriter следует использовать отдельные потоки.
 *  • StringReader - поток символов, источником которого является строка.
        Writer:
 *   • BufferedWriter — буферизует символы при записи текста в поток вывода символов, чтобы обеспечить эффективную
 *   запись отдельных символов, массивов и строк.
 *   • CharArrayWriter — этот класс использует массив символов в качестве места назначения.
 *   • OutputStreamWriter. OutputStreamWriter — это мост от потоков символов к потокам байтов: записываемые в него
 *   символы кодируются в байты с использованием заданной кодировки. OutputStreamWriter должен быть заключен в
 *   BufferedWriter для повышения производительности.
 *   • FileWriter — это специализированный поток символов для записи текста в символьные файлы.
 *   • PipedWriter — конвейерные потоки ввода символов, которые следует подключить к PipedReader для создания
 *   конвейерного потока. В идеале для PipedReader и PipedWriter следует использовать отдельные потоки.
 *   • PrintWriter — печатает форматированные представления объектов в поток вывода текста.
 *   • StringWriter — поток символов, который собирает выходные данные в строковый буфер, который затем можно
 *   использовать для создания строки.
 */
public class CharacterStreams {
}
